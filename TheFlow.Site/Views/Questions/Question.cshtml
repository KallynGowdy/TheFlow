@using MarkdownSharp;
@using TheFlow.Site;

@model TheFlow.Api.Models.ViewQuestionModel

@{
    ViewBag.Title = string.Format("{0} - {1} | {2}", Model.Tags.OrderBy(t => t.Subscriptions).OrderBy(t => t.DateCreated).FirstOrDefault().Name,  Model.Title, TheFlow.Site.Settings.SiteName);
    var markdown = new Markdown(true);
    var user = TheFlow.Site.Controllers.ControllerHelper.Authenticate(Request);
}

@* Draws the comments section for the given post *@
@helper DrawCommentSection(TheFlow.Api.Models.ViewPostModel post)
{
    <div class="row">
        @if (Model.Comments.Count() > 0)
        {
            foreach (var comment in post.Comments)
            {
            <div class="col-xs-12">
                <div class="row panel panel-default">
                    <div class="col-sm-2">
                        <div class="row">
                            @if (comment.UpVotes > 0)
                            {
                                <div class="col-xs-6">
                                    @comment.UpVotes
                                </div>
                                <div class="col-xs-6">
                                </div>
                            }
                            else
                            {  
                                <div class="col-xs-12">
                                </div>   
                            }
                        </div>
                    </div>
                    <div class="col-sm-10">
                        @comment.SanitizedBody.ToHtml()
                    </div>
                </div>
            </div>
            }
        }
        <div class="col-sm-12">
        </div>
    </div>
}

@section head
{
    <link href="@Helpers.GetCodeStylePath()" type="text/css" rel="stylesheet" />
}

@section Scripts
{
    <script src="~/scripts/parsley.js"></script>
    <script src="~/scripts/pagedown/Markdown.Converter.js"></script>
    <script src="~/scripts/pagedown/Markdown.Sanitizer.js"></script>
    <script src="~/scripts/pagedown/Markdown.Editor.js"></script>
    <script src="~/scripts/prettyprint/prettify.js"></script>
    @*<script src="~/scripts/prettyprint/run_prettify.js"></script>*@
    <script src="~/scripts/editor.js"></script>
    <script type="text/javascript">
        loader.jqueryCallback.push(function () {
            var converter = new Markdown.getSanitizingConverter();

            defaultHooks(converter);

            enableTab("wmd-input");
            highlightCode();

            enableEditor(function (editor) {
                editor.getConverter().hooks.chain("preConversion", function (text) {
                    $("#Body").attr("value", text);
                    return text;
                });
            });


            //find all of the elements with the up-vote class
            //and send an ajax request to up-vote the post
            $('.up-vote').click(function () {
                var clicked = $(this);
                var data = clicked.attr('data-post');
                $.ajax({
                    type: "post",
                    dataType: "json",
                    url: '@Url.Action("UpVote", "Posts")/' + data,
                    data: AddAntiForgeryToken({ ajax: true }),
                    success: function (data, textStaus) {
                        if (data.redirect) {
                            window.location.replace(data.redirect);
                        }
                    }
                });
            });

            //find all of the elements with the down-vote class
            //and send an ajax request to up-vote the post
            $('.down-vote').click(function () {
                var clicked = $(this);
                var data = clicked.attr('data-post');
                $.ajax({
                    type: "post",
                    dataType: "json",
                    url: '@Url.Action("DownVote", "Posts")/' + data,
                    data: AddAntiForgeryToken({ ajax: true }),
                    success: function (data, textStaus) {
                        if (data.redirect) {
                            window.location.replace(data.redirect);
                        }
                    }
                });
            });

            //find all of the elements with the post-back class
            //and send an ajax request to the url specified in the data-post attribute.
            $('.post-back').click(function () {
                var clicked = $(this);
                var data = clicked.attr('data-post');
                $.ajax({
                    type: "post",
                    dataType: "json",
                    url: data,
                    data: AddAntiForgeryToken({ ajax: true }),
                    success: function (data, textStaus) {
                        if (data.redirect) {
                            window.location.replace(data.redirect);
                        }
                    }
                });
            });

            //tell the browser to remove the query string from the url bar
            history.replaceState({}, '@ViewBag.Title', '@Request.Url.AbsolutePath');

            //find all of the elements with .time class
            var timeElements = $('.time-from-now');

            setInterval(function () {
                //set the text
                timeElements.html(function (index, text) {
                    timeElements[index].innerText = moment.utc(timeElements[index].getAttribute('data-time')).local().fromNow();
                });
            }, 1000); //60000 /*every minute*/);
        });
    </script>
}
@{bool displayDelete = (user != null && @Model.Author.DisplayName == user.DisplayName);}
<div class="row">
    <div class="col-xs-12 panel panel-default">
        <div class="row">
            <div class="col-sm-12">
                <h2 style="color: #f2b21b">@Model.Title</h2>
            </div>
        </div>
        <hr />
        <div class="row post-row">
            <div class="col-sm-1">
                <div class="row text-center">
                    <div class="col-xs-4 col-sm-12"><a data-post="@Model.Id" class="up-vote btn"><i class="icon-arrow-up"></i></a></div>
                    <div class="col-xs-4 col-sm-12"><strong class="votes" title="@Model.UpVotes.Count() upvotes and @Model.DownVotes.Count() downvotes">@Model.NetVote</strong></div>
                    <div class="col-xs-4 col-sm-12"><a data-post="@Model.Id" class="down-vote btn"><i class="icon-arrow-down"></i></a></div>
                </div>
            </div>
            <hr class="visible-xs" />
            <div class="col-sm-11 post-body">
                @Model.SanitizedBody.ToHtml()
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-sm-6">
                <div class="btn-group">
                    <a href="#" class="btn btn-default">Share</a>
                    <a href="#" class="btn btn-default">Edit</a>
                    <a href="#" class="btn btn-default">Flag</a>
                    @if (displayDelete)
                    {
                        <a data-post="@Url.Action("Delete", "Questions", new { id = Model.Id })" class="post-back btn btn-default">Delete</a>
                    }
                </div>
            </div>
            <div class="col-sm-6 text-right">
                <p>Posted by @Html.ActionLink(Model.Author.DisplayName, "Info", "Users", new { userId = Model.Author.OpenId }, null) <span class="time-from-now" data-time="@Model.DateCreated.ToUtcString()"></span></p>
            </div>
        </div>
        <hr />
        @DrawCommentSection(Model)
    </div>

    @if (Model.Answers != null && Model.Answers.Any())
    {
        <hr />
        <h2>Answers</h2>
        foreach (var answer in Model.Answers)
        {
        <div class="col-xs-12 panel panel-default">
            <div class="row post-row">
                <div class="col-sm-1">
                    <div class="row text-center">
                        <div class="col-xs-4 col-sm-12"><a data-post="@answer.Id" class="up-vote btn"><i class="icon-arrow-up"></i></a></div>
                        <div class="col-xs-4 col-sm-12"><strong class="votes" title="@answer.UpVotes.Count() upvotes and @answer.DownVotes.Count() downvotes">@answer.NetVote</strong></div>
                        <div class="col-xs-4 col-sm-12"><a data-post="@answer.Id" class="down-vote btn"><i class="icon-arrow-down"></i></a></div>
                    </div>
                </div>
                <hr class="visible-xs" />
                <div class="col-sm-11 post-body" id="@answer.Id">
                    @answer.SanitizedBody.ToHtml()
                </div>
            </div>
            <hr />
            <div class="row">
                @{
            displayDelete = (user != null && user.DisplayName == answer.Author.DisplayName);
                }
                <div class="col-sm-6">
                    <div class="btn-group">
                        <a href="#" class="btn btn-default">Share</a>
                        <a href="#" class="btn btn-default">Edit</a>
                        <a href="#" class="btn btn-default">Flag</a>
                        @if (displayDelete)
                        {
                            <a data-post="@Url.Action("Delete", "Questions", new { id = Model.Id })" class="post-back btn btn-default">Delete</a>
                        }
                    </div>
                </div>
                <div class="col-sm-6 text-right">
                    <p>Posted by @Html.ActionLink(answer.Author.DisplayName, "Info", "Users", new { userId = answer.Author.OpenId }, null) <span class="time-from-now" data-time="@answer.DateCreated.ToUtcString()"></span></p>
                </div>
            </div>
            <hr />
            @DrawCommentSection(answer)
        </div>
        
        }
    }
    else
    {
        <hr />
        <h3 class="text-center">No answers have been posted yet. Help and post an answer yourself!</h3>   
    }
</div>
<hr />
<div class="row">
    <div class="col-xs-12">
        @{
            bool editable = (user != null && Model.Answers.Any(a => a.Author.DisplayName == user.DisplayName));
        }
        @if (editable)
        {
            <h2 class="hidden-xs">Edit your Answer</h2>
            <h2 class="visible-xs text-center">Edit your Answer</h2>
        }
        else
        {
            <h2 class="hidden-xs">Submit your Answer</h2>
            <h2 class="visible-xs text-center">Submit your Answer</h2>
        }
        @using (Html.BeginForm("Create", "Answers", FormMethod.Post, new { data_validate = "parsley", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" id="QuestionId" name="QuestionId" value="@Model.Id.ToString()" />
            <div id="body-field">
                <div id="wmd-button-bar" class="wmd-button-bar"></div>
                <textarea data-minlength="15" class="wmd-input" id="wmd-input" data-error-message="Your answer must be at least 15 characters long" required>@if (editable)
                                                                                                                                                             {<text>@Model.Answers.Single(a => a.Author.DisplayName == user.DisplayName).MarkdownBody</text>}</textarea>
            </div>
            <div class="panel panel-default editor-preview">
                <small id="preview-text">Preview</small>
                <br />
                <div id="wmd-preview"></div>
            </div>
            <input type="hidden" id="Body" name="Body" value="" />
            <button class="btn btn-success" type="submit">
                @if (editable)
                {
                    @:Edit your Answer
                }
                else
                {
                    @:Post your Answer
                }</button>
        }
    </div>
</div>
