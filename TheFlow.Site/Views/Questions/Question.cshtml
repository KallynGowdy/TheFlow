@using MarkdownSharp;
@using TheFlow.Site;

@model TheFlow.Api.Models.ViewQuestionModel

@{
    ViewBag.Title = Model.Title;
    var markdown = new Markdown(true);
    var user = TheFlow.Site.Controllers.ControllerHelper.Authenticate(Request);
}

@section head
{
    <link href="@Helpers.GetCodeStylePath()" type="text/css" rel="stylesheet" />
}

@section Scripts
{
    <script src="~/scripts/parsley.js"></script>
    <script src="~/scripts/pagedown/Markdown.Converter.js"></script>
    <script src="~/scripts/pagedown/Markdown.Sanitizer.js"></script>
    <script src="~/scripts/pagedown/Markdown.Editor.js"></script>
    <script src="~/scripts/prettyprint/prettify.js"></script>
    @*<script src="~/scripts/prettyprint/run_prettify.js"></script>*@
    <script src="~/scripts/editor.js"></script>
    <script type="text/javascript">
        $(function () {

            var converter = new Markdown.getSanitizingConverter();

            defaultHooks(converter);


            enableTab("wmd-input");
            highlightCode();

            enableEditor(function (editor) {
                editor.getConverter().hooks.chain("preConversion", function (text) {
                    $("#Body").attr("value", text);
                    return text;
                });
            });
        });

        //find all of the elements with the up-vote class
        //and send an ajax request to up-vote the post
        $('.up-vote').click(function () {
            var clicked = $(this);
            var data = clicked.attr('data-post');
            $.ajax({
                type: "post",
                dataType: "json",
                url: '@Url.Action("UpVote", "Posts")/' + data,
                data: AddAntiForgeryToken({ ajax: true }),
                success: function (data, textStaus) {
                    if (data.redirect) {
                        window.location.replace(data.redirect);
                    }
                }
            });
        });

        //find all of the elements with the up-vote class
        //and send an ajax request to up-vote the post
        $('.down-vote').click(function () {
            var clicked = $(this);
            var data = clicked.attr('data-post');
            $.ajax({
                type: "post",
                dataType: "json",
                url: '@Url.Action("DownVote", "Posts")/' + data,
                data: AddAntiForgeryToken({ ajax: true }),
                success: function (data, textStaus) {
                    if (data.redirect) {
                        window.location.replace(data.redirect);
                    }
                }
            });
        });

        //$('.delete').click(function () {
        //    var clicked = $(this);
        //    var data = clicked.attr('data-post');
        //    $.ajax({
        //        type: "post",
        //        dataType: "html",
        //        url: '/TheFlow/Posts/DownVote/' + data,
        //        data: AddAntiForgeryToken({ ajax: true }),
        //        success: function (response) {
        //            location.reload();
        //        }
        //    });
        //});

        $('.post-back').click(function () {
            var clicked = $(this);
            var data = clicked.attr('data-post');
            $.ajax({
                type: "post",
                dataType: "json",
                url: data,
                data: AddAntiForgeryToken({ ajax: true }),
                success: function (data, textStaus) {
                    if (data.redirect) {
                        window.location.replace(data.redirect);
                    }
                }
            });
        });

        //tell the browser to remove the query string from the url bar
        history.replaceState({}, '@ViewBag.Title', '@Request.Url.AbsolutePath');

        //find all of the elements with .time class
        var timeElements = $('.time-from-now');

        setInterval(function () {
            //set the text
            timeElements.html(function (index, text) {
                timeElements[index].innerText = moment.utc(timeElements[index].getAttribute('data-time')).local().fromNow();
            });
        }, 1000); //60000 /*every minute*/);
    </script>
}

@*@section TimeUpdateFunction
{
    var timePosted = @(new HtmlString(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(Model.DateCreated.ToUniversalTime().ToString("MM/dd/yyyy H:mm:ss"))));
    var format = "MM/DD/YYYY H:mm:ss";
    $("#date-posted").text(moment.utc(timePosted, format).local().fromNow());

    @foreach (var answer in Model.Answers)
    {
        var id = answer.Id;
        @:var time_@id = @(new HtmlString(new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(answer.DateCreated.ToUniversalTime().ToString("MM/dd/yyyy H:mm:ss"))));
        @:$("#time-@id").text(moment.utc(time_@id, format).local().fromNow());
    }
}*@
@{bool displayDelete = (user != null && @Model.Author.DisplayName == user.DisplayName);}
<div class="uk-panel uk-panel-box uk-panel-box-secondary">
    <div class="uk-grid">
        <div class="uk-width-medium-1-1">
            <h2 style="color: #f2b21b">@Model.Title</h2>
        </div>
    </div>
    <hr />
    <div class="uk-grid">
        <div class="uk-width-medium-1-10 columns large-1">
            <a class="uk-button full-width uk-visible-small uk-margin uk-text-center">Vote</a>
            <div class="uk-hidden-small uk-vertical-align-middle">
                <a data-post="@Model.Id" class="uk-icon-button uk-icon-arrow-up tiny up-vote" title="Vote Up"></a>
                <br />
                <span class="uk-icon-button uk-margin-top" title="@(String.Format("{0} Up Votes and {1} Down Votes", Model.UpVotes.Count().ToString(), Model.DownVotes.Count().ToString()))">@Model.NetVote</span>
                <br />
                <a data-post="@Model.Id" class="uk-icon-button uk-icon-arrow-down uk-margin-top down-vote" title="Vote Down"></a>
            </div>
        </div>
        <div class="uk-width-medium-9-10 columns large-11">
            <div class="uk-panel uk-panel-box uk-panel-box-secondary">
                @*@TheFlow.Site.Controllers.ControllerHelper.HtmlSanitizer.GetHtml(markdown.Transform(Model.Body)).ToHtml()*@
                @Model.SanitizedBody.ToHtml()
            </div>
        </div>
    </div>
    <hr />
    <div class="uk-grid">
        <div class="uk-width-medium-1-2">
            <div class="uk-button-group">
                <a href="#" class="uk-button medium-on-small tiny-on-medium-up">Share</a>
                <a href="#" class="uk-button medium-on-small tiny-on-medium-up">Edit</a>
                <a href="#" class="uk-button medium-on-small tiny-on-medium-up">Flag</a>
                @if (displayDelete)
                {
                    <a data-post="@Url.Action("Delete", "Questions", new { id = Model.Id })" class="post-back uk-button medium-on-small tiny-on-medium-up">Delete</a>
                }
            </div>
        </div>
        <div class="uk-width-medium-1-2 uk-margin-top">
            <article class="uk-comment">
                <header class="uk-comment-header">
                    <img class="uk-comment-avatar" src="" alt="@Model.Author.DisplayName">
                    <h4 class="uk-comment-title uk-text-left">@Model.Author.DisplayName</h4>
                    <div class="uk-comment-meta"><span class="time-from-now" data-time="@Model.DateCreated.ToUtcString()"></span></div>
                </header>
                <div class="uk-comment-body"></div>
            </article>
            @*<p>Posted by <a href="/Users/Info?user=@Model.Author.DisplayName">@Model.Author.DisplayName</a> <span class="time-from-now" data-time="@Model.DateCreated.ToUtcString()"></span></p>
        *@
        </div>
    </div>
</div>
@if (Model.Answers != null && Model.Answers.Any())
{
    foreach (var answer in Model.Answers)
    {
    <hr />
    <div class="uk-panel uk-panel-box uk-panel-box-secondary">
        <div class="uk-grid">
            <div class="uk-width-medium-1-10">
                <a class="uk-button full-width uk-visible-small uk-margin uk-text-center">Vote</a>
                <div class="uk-hidden-small">
                    <a data-post="@answer.Id" class="uk-icon-button uk-icon-arrow-up up-vote" title="Vote Up"></a>
                    <br />
                    <a class="uk-icon-button uk-margin-top" title="@(String.Format("{0} Up Votes and {1} Down Votes", Model.UpVotes.Count().ToString(), Model.DownVotes.Count().ToString()))">@answer.NetVote</a>
                    <br />
                    <a data-post="@answer.Id" class="uk-icon-button uk-icon-arrow-down uk-margin-top down-vote"  title="Vote Down"></a>
                </div>
            </div>
            <div class="uk-width-medium-9-10">
                <div class="uk-panel uk-panel-box uk-panel-box-secondary" id="@answer.Id">
                    @*@TheFlow.Site.Controllers.ControllerHelper.HtmlSanitizer.GetHtml(markdown.Transform(answer.Body)).ToHtml()*@
                    @answer.SanitizedBody.ToHtml()
                </div>
            </div>
        </div>
        <hr />
        <div class="uk-grid">
            @{
        displayDelete = (user != null && user.DisplayName == answer.Author.DisplayName);
            }
            <div class="uk-width-medium-1-2">
                <div>
                    <div class="uk-button-group">
                        <a href="#" class="uk-button medium-on-small tiny-on-medium-up">Share</a>
                        <a href="#" class="uk-button medium-on-small tiny-on-medium-up">Edit</a>
                        <a href="#" class="uk-button medium-on-small tiny-on-medium-up">Flag</a>
                        @if (displayDelete)
                        {
                            <a data-post="@Url.Action("Delete", "Answers", new { id = answer.Id })" class="post-back uk-button medium-on-small tiny-on-medium-up">Delete</a>
                        }
                    </div>
                </div>
                @*<div class="row">
                    <div class="@columnSize columns">
                        <a href="#" class="button tiny full-width">Share</a>
                    </div>
                    <div class="@columnSize columns">
                        <a href="#" class="button tiny full-width">Edit</a>
                    </div>
                    <div class="@columnSize columns">
                        <a href="#" class="button tiny full-width">Flag</a>
                    </div>
                    @if (displayDelete)
                    {
                        <div class="@columnSize columns">
                            <a href="/Answers/Delete/@answer.Id" class="button tiny">Delete</a>
                        </div>   
                    }
                </div>*@
            </div>
            <div class="uk-width-medium-1-2 uk-text-right uk-margin-top">
                <p>Posted by <a href="/Users/Info?user=@answer.Author.DisplayName">@answer.Author.DisplayName</a> <span class="time-from-now" data-time="@answer.DateCreated.ToUtcString()"></span></p>
            </div>
        </div>
    </div>
    }
}
else
{
    <hr />
    <h3 class="uk-text-center">No answers have been posted yet. Help and post an answer yourself!</h3>   
}

<hr />
<div class="uk-grid">
    <div class="uk-width-medium-1-1 columns large-12">
        @{
            bool editable = (user != null && Model.Answers.Any(a => a.Author.DisplayName == user.DisplayName));
        }
        @if (editable)
        {
            <h2 class="uk-hidden-small">Edit your Answer</h2>
            <h2 class="uk-visible-small uk-text-center">Edit your Answer</h2>
        }
        else
        {
            <h2 class="uk-hidden-small">Submit your Answer</h2>
            <h2 class="uk-visible-small uk-text-center">Submit your Answer</h2>
        }
        @using (Html.BeginForm("Create", "Answers", FormMethod.Post, new { data_validate = "parsley", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" id="QuestionId" name="QuestionId" value="@Model.Id.ToString()" />
            <div id="body-field">
                <textarea data-minlength="15" class="wmd-input" id="wmd-input" data-error-message="Your answer must be at least 15 characters long" required>@if (editable)
                                                                                                                                                             {<text>@Model.Answers.Single(a => a.Author.DisplayName == user.DisplayName).MarkdownBody</text>}</textarea>
            </div>
            <div class="uk-panel uk-panel-box uk-panel-box-secondary uk-margin">
                <small class="uk-text-left" style="color: #858585">Preview</small>
                <div id="wmd-preview"></div>
            </div>
            <input type="hidden" id="Body" name="Body" value="" />
            <button class="uk-button uk-button-success uk-margin" type="submit">
                @if (editable)
                {
                    @:Edit your Answer
                }
                else
                {
                    @:Post your Answer
                }</button>
@*<button class="uk-button-success uk-visible-small full-width" type="submit">
                @if (editable)
                {
                    @:Edit your Answer
                }
                else
                {
                    @:Post your Answer
                }</button>*@
        }
    </div>
</div>
