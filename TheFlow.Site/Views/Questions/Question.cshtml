@using MarkdownSharp;
@using TheFlow.Site;

@model TheFlow.Api.Entities.Question

@{
    ViewBag.Title = string.Format("{0} - {1} | {2}", Model.Tags.OrderBy(t => t.Subscribers.Count).OrderBy(t => t.DateCreated).FirstOrDefault().Name, Model.Title, TheFlow.Site.Settings.SiteName);
    var markdown = new Markdown(true);
    var user = TheFlow.Site.Controllers.ControllerHelper.GetAuthenticatedUser();
}

@* Draws the comments section for the given post *@
@helper DrawCommentSection(TheFlow.Api.Models.ViewPostModel post)
{
    <h4 class="text-left"><small>Comments</small></h4>
    <div class="row">
        <div class="col-sm-7">
            @if (Model.Comments.Count() > 0)
            {
                foreach (var comment in post.Comments)
                {
                <div class="row comment-container">
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-xs-7">
                                @comment.SanitizedBody.ToHtml()
                            </div>
                            <div class="col-xs-5">
                                <span class="pull-right">-- <a href="~/Users/Info?userId=@comment.Author.OpenId">@comment.Author.DisplayName</a> <span class="time" data-time="@comment.DatePosted.ToUtcString()"></span></span>
                            </div>
                        </div>
                    </div>
                </div>
                }
            }
        </div>
        <div class="col-sm-5">
            <form action="~/Posts/AddComment/@post.Id" method="post" data-validate="parsley" role="form" novalidate>
                @Html.AntiForgeryToken()
                <textarea data-required="true" data-trigger="keyup" class="full-width" style="max-width: 100%;" id="Comment.Body" data-minlength="10" data-error-message="Please type in a comment that is at least 10 characters long." placeholder="Type your comment here" name="Body" required></textarea>
                <button class="btn btn-default input-margin full-width" type="submit">Add Comment</button>
            </form>
        </div>
    </div>
}

@helper DrawCommentSection(TheFlow.Api.Entities.Post post)
{
    <h4 class="text-left"><small>Comments</small></h4>
    <div class="row">
        <div class="col-sm-7">
            @if (Model.Comments.Count() > 0)
            {
                foreach (var comment in post.Comments)
                {
                <div class="row comment-container">
                    <div class="col-sm-12">
                        <div class="row">
                            <div class="col-xs-7">
                                @comment..ToHtml()
                            </div>
                            <div class="col-xs-5">
                                <span class="pull-right">-- <a href="~/Users/Info?userId=@comment.Author.OpenId">@comment.Author.DisplayName</a> <span class="time" data-time="@comment.DatePosted.ToUtcString()"></span></span>
                            </div>
                        </div>
                    </div>
                </div>
                }
            }
        </div>
        <div class="col-sm-5">
            <form action="~/Posts/AddComment/@post.Id" method="post" data-validate="parsley" role="form" novalidate>
                @Html.AntiForgeryToken()
                <textarea data-required="true" data-trigger="keyup" class="full-width" style="max-width: 100%;" id="Comment.Body" data-minlength="10" data-error-message="Please type in a comment that is at least 10 characters long." placeholder="Type your comment here" name="Body" required></textarea>
                <button class="btn btn-default input-margin full-width" type="submit">Add Comment</button>
            </form>
        </div>
    </div>
}

@section head
{
    <link href="@Helpers.GetCodeStylePath()" type="text/css" rel="stylesheet" />
    <link rel="stylesheet" href="~/Content/font-awesome/font-awesome.css" />
}

@section Modals
{
    @Helpers.DrawEditModal(Model.Id, "Edit this question", Model.Body)
    @foreach (var answer in Model.Answers)
    {
        @:@Helpers.DrawEditModal(answer.Id, "Edit this answer", answer.Body)
    }
}

@section AsyncScripts
{
    ,'parsley' : '@Url.Content("~/scripts/parsley.js")',
    'markdownConverter' : '@Url.Content("~/scripts/pagedown/Markdown.Converter.js")',
    'markdownSanitizer' : '@Url.Content("~/scripts/pagedown/Markdown.Sanitizer.js")',
    'markdownEditor' : '@Url.Content("~/scripts/pagedown/Markdown.Editor.js")',
    'prettify' : '@Url.Content("~/scripts/prettyprint/prettify.js")',
    'editor' : '@Url.Content("~/scripts/editor.js")',
    'ajax' : '@Url.Content("~/scripts/ajax.js")',
    'responsive' : '@Url.Content("~/scripts/responsive.js")',
    'time' : '@Url.Content("~/scripts/time.js")'
}

@section Scripts
{
    <script type="text/javascript">
        loader.completeCallback.push(function () {
            var converter = new Markdown.getSanitizingConverter();

            defaultHooks(converter);

            enableTab("wmd-input");
            highlightCode();

            enableEditor(function (editor) {
                editor.getConverter().hooks.chain("preConversion", function (text) {
                    $("#Body").attr("value", text);
                    return text;
                });
            });

            @foreach (var answer in Model.Answers)
            {
               <text>
            enableTab('wmd-input-@(answer.Id)');
            enableEditor(function (editor) {
                editor.getConverter().hooks.chain("preConversion", function (text) {
                    $("#Body").attr("value", text);
                    return text;
                });
            }, '-@answer.Id');</text>
            }

            //tell the browser to remove the query string from the url bar
            history.replaceState({}, '@ViewBag.Title', '@Request.Url.AbsolutePath');
        });
    </script>
}
@{bool displayDelete = (user != null && Model.Author.OpenId == user.OpenId && Model.AcceptedAnswer == null);}
<div class="row">
    <div class="col-xs-12 panel panel-default">
        <div class="row">
            <div class="col-sm-12">
                <h2 style="color: #f2b21b">@Model.Title</h2>
            </div>
        </div>
        <hr />
        <div class="row post-row">
            <div class="col-sm-1">
                <div class="row text-center">
                    <div class="col-xs-4 col-sm-12"><a data-post="@Model.Id" class="up-vote"><i class="icon-arrow-up"></i></a></div>
                    <div class="col-xs-4 col-sm-12"><strong class="votes" title="@Model.UpVotes.Count() upvotes and @Model.DownVotes.Count() downvotes">@Model.NetVotes()</strong></div>
                    <div class="col-xs-4 col-sm-12"><a data-post="@Model.Id" class="down-vote"><i class="icon-arrow-down"></i></a></div>
                </div>
            </div>
            <hr class="visible-xs" />
            <div class="col-sm-11 post-body">
                @Model.MarkdownBody.ToHtml()
            </div>
        </div>
        <hr />
        <div class="row">
            <div class="col-xs-6">
                <div class="responsive btn-group">
                    <a href="#" class="btn btn-default">Share</a>
                    <a data-toggle="modal" href="#editPost@(Model.Id)" class="btn btn-default">Edit</a>
                    <a href="#" class="btn btn-default">Flag</a>
                    @if (displayDelete)
                    {
                        <a data-post="@Url.Action("Delete", "Questions", new { id = Model.Id })" class="post-back btn btn-primary">Delete</a>
                    }
                </div>
            </div>
            <div class="col-xs-6 text-right">
                <p>Posted by @Html.ActionLink(Model.Author.DisplayName, "Info", "Users", new { userId = Model.Author.OpenId }, null) <span class="time-from-now" data-time="@Model.DatePosted.Value.ToUtcString()"></span></p>
            </div>
        </div>
        <hr />
        @DrawCommentSection(Model)
    </div>

    @if (Model.Answers != null && Model.Answers.Any())
    {
        <hr />
        <h2>Answers</h2>
        foreach (var answer in Model.Answers)
        {
        <div class="col-xs-12 panel panel-default">
            <div class="row post-row">
                <div class="col-sm-1">
                    <div class="row text-center">
                        <div class="col-xs-4 col-sm-12"><a data-post="@answer.Id" class="up-vote"><i class="icon-arrow-up"></i></a></div>
                        <div class="col-xs-4 col-sm-12 text-center"><strong class="votes" title="@answer.UpVotes.Count() upvotes and @answer.DownVotes.Count() downvotes">@answer.NetVotes()</strong></div>
                        <div class="col-xs-4 col-sm-12"><a data-post="@answer.Id" class="down-vote"><i class="icon-arrow-down"></i></a></div>
                        @if (answer.Accepted)
                        {
                            <div class="col-xs-4 col-sm-12">
                                <i class="icon-ok success" title="This answer was marked as the solution to the asker's problem."></i>
                            </div>
                        }
                    </div>
                </div>
                <hr class="visible-xs" />
                <div class="col-sm-11 post-body" id="@answer.Id">
                    @answer.MarkdownBody.ToHtml()
                </div>
            </div>
            <hr />
            <div class="row">
                @{
                        displayDelete = (user != null && user.OpenId == answer.Author.OpenId && !answer.Accepted);
                        bool displayAccept = (user != null && user.OpenId == Model.Author.OpenId && Model.AcceptedAnswer == null);
                }
                <div class="col-sm-6 col-xs-3">
                    <div class="btn-group responsive">
                        <a href="#" class="btn btn-default">Share</a>
                        <a data-toggle="modal" href="#editPost@(answer.Id)" class="btn btn-default">Edit</a>
                        <a href="#" class="btn btn-default">Flag</a>
                        @if (displayDelete)
                        {
                            <a data-post="@Url.Action("Delete", "Questions", new { id = Model.Id })" class="post-back btn btn-primary">Delete</a>
                        }
                        @if (displayAccept)
                        {
                            <a data-post="@Url.Action("Accept", "Answers", new { id = answer.Id })" class="post-back btn btn-success">Mark as Answer</a>
                        }
                    </div>
                </div>
                <div class="col-sm-4 col-sm-offset-2 col-xs-9 text-right">
                    <div class="panel panel-default">
                        <div class="row">
                            <div class="col-xs-6 col-sm-6 text-left">
                                @Helpers.DrawGravitar(answer.Author.EmailAddress)
                            </div>
                            <div class="col-xs-6 col-sm-6 text-center">
                                <p>@Html.ActionLink(answer.Author.DisplayName, "Info", "Users", new { userId = answer.Author.OpenId }, null)</p>
                                <p><span class="time-from-now" data-time="@answer.DatePosted.Value"></span></p>
                            </div>

                        </div>
                    </div>
                    @*                    <p>Posted by @Html.ActionLink(answer.Author.DisplayName, "Info", "Users", new { userId = answer.Author.OpenId }, null) <span class="time-from-now" data-time="@answer.DateCreated.ToUtcString()"></span></p>
                *@
                </div>
            </div>
            <hr />
            @DrawCommentSection(answer)
        </div>
        
        }
    }
    else
    {
        <hr />
        <h3 class="text-center">No answers have been posted yet. Help and post an answer yourself!</h3>   
    }
</div>
<hr />
<div id="AnswerForm" class="row">
    <div class="col-xs-12">
        @{
            bool editable = (user != null && Model.Answers.Any(a => a.Author.DisplayName == user.DisplayName));
        }
        @if (editable)
        {
            <h2 class="hidden-xs">Edit your Answer</h2>
            <h2 class="visible-xs text-center">Edit your Answer</h2>
        }
        else
        {
            <h2 class="hidden-xs">Submit your Answer</h2>
            <h2 class="visible-xs text-center">Submit your Answer</h2>
        }
        @using (Html.BeginForm("Create", "Answers", FormMethod.Post, new { data_validate = "parsley", novalidate = "novalidate" }))
        {
            @Html.AntiForgeryToken()
            <input type="hidden" id="QuestionId" name="QuestionId" value="@Model.Id.ToString()" />
            <div id="body-field">
                <div id="wmd-button-bar" class="wmd-button-bar"></div>
                <textarea data-minlength="15" class="wmd-input" id="wmd-input" data-error-message="Your answer must be at least 15 characters long" required>@if (editable)
                                                                                                                                                             {<text>@Model.Answers.Single(a => a.Author.DisplayName == user.DisplayName).GetMarkdownBody()</text>}</textarea>
            </div>
            <div class="panel panel-default editor-preview">
                <small id="preview-text">Preview</small>
                <br />
                <div id="wmd-preview"></div>
            </div>
            <input type="hidden" id="Body" name="Body" value="" />
            <button class="btn btn-success" type="submit">
                @if (editable)
                {
                    @:Edit your Answer
                }
                else
                {
                    @:Post your Answer
                }</button>
        }
    </div>
</div>
